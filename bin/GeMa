#!/usr/bin/python
# Time-stamp: 2016-12-06
# Author: Chenchen Zhao
# Email: 1310780@tongji.edu.cn
"""
    <GeMa : generate expression matrix from input fastq file>
    Copyright (C) <2016>  <Chengchen Zhao>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

# ------------------------------------
# Python Modual
# ------------------------------------

import os
import sys
import string
import time
from optparse import OptionParser
# --------------------------
# custom package
# --------------------------

### tool function
from DrSeq2pipe.Utility      import (Get,
                                   ChangeName,
                                   RaiseError,
                                   Log,
                                   LogError,
                                   LogCommand,
                                   Run,
                                   CreateDirectory,
                                   SampleDownTransformSam,
                                   GeneAnnotation,
                                   ReformBarcodeFastq,
                                   CombineReads,
                                   GenerateMatrix
                                   )
# --------------------------
# main 
# --------------------------

def GenerateMatrix2(refgene,inputbed,expmat):
    '''
    generate two matrix
    1. expression matrix whose row/column is corresponded to genes and cell
    '''

    inf = open(refgene)
    out_matrix = {}
    for line in inf:
        if line.startswith('#'):
            continue
        ll = line.strip().split()
        if not ll[12] in allgenes:
            out_matrix[allgenes] = 0
    inf.close()

    inf = open(inputbed)
    for line in inf:
        ll = line.strip().split()
        gene = ll[9]
        if out_matrix.has_key(gene):
            out_matrix[gene] += 1
    inf.close()
    outf = open(expmat,'w')
    outf.write("gene_name\treads_count\t")
    for each_gene in out_matrix:
        outf.write("%s\t%d\n"%(each_gene,out_matrix[each_gene]))
    outf.close()


def main():
    '''
    generate expression matrix file 
    main data processing step, including mapping, generate expression matrix and QC matrix which is used in next step
    for fastq format : 
        STAR/bowtie2 mapping
        q30 filter, 
    for sam format:
        q30 filter     
    ''' 
        ## define the options when we run this programing we needed
    usage = "usage: %prog -1 <input_fastq_1> -2 input_fastq_2 -m mapping_tool -i mapping_index -o outname -p 8 --qfilter -g gene_annotation"
    description = "GeMa : main data processing step, including mapping, generate expression matrix"
    optparser = OptionParser(version="%prog 0.1",description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="Show this help message and exit.")
    optparser.add_option("-1","--fastq1",dest="fastq1",type="string",help="input fastq file for single-end sequencing Or fastq_1 file for pair-end sequencing.Sam file also supported.This parameter is required.")
    optparser.add_option("-2","--fastq2",dest="fastq2",type="string",help="input fastq_2 file for pair-end sequencing.")
    optparser.add_option("-m","--mapping_tool",dest="mapping_tool",default=1,type="int",help="tool for mapping you choose. 1 strands for STAR, 2 strands for bowtie2")
    optparser.add_option("-i","--mapping_index",dest="mapping_index",type="string",help="mapping index location.This parameter is required.")
    optparser.add_option("-o","--outname",dest="outname",type="string",default='out',help="output name.This parameter is required.Default is 'out'.")
    optparser.add_option("-p","--threads",dest="threads",type="string",default='1',help="number of alignment threads to launch. Default is 1.")
    optparser.add_option("--qfilter",dest="qfilter",type="string",default='1',help="whether filter out reads that are bad according to sequencing quality")
    optparser.add_option("-g","--gene_annotation",dest="gene_annotation",type="string",help="gene annotation for expression matrix generate")
    
    (options,args) = optparser.parse_args()
    fastq1 = options.fastq1
    fastq2 = options.fastq2
    mapping_tool = options.mapping_tool
    mapping_index = options.mapping_index
    outname = options.outname
    threads = options.threads
    qfilter = options.qfilter
    gene_annotation = options.gene_annotation
    ## to avoid the wrong input 
    if (fastq1==None or mapping_tool==None or mapping_index==None or outname==None or threads==None or qfilter==None or gene_annotation==None):
        print "Please Check your input.\n"
        optparser.print_help()
        sys.exit(0)
    if not os.path.isfile(fastq1):
        print "Please Check your input file, this file %s is not available.\n"%each_file
        sys.exit(0)
    start_dir = os.getcwd()+'/'
    CreateDirectory(output_name)
    mapping = start_dir + output_name + '/mapping/'
    CreateDirectory(mapping)
    os.chdir(mapping)

    conf_dict = {}
    conf_dict['General'] = {}
    conf_dict['General']['outname'] = output_name
    conf_dict['General']['outputdirectory'] = start_dir + conf_dict['General']['outname']+"/"
    conf_dict['General']['fastq_1'] = fastq1
    if fastq1.endswith("fastq"):
        conf_dict['General']['format'] = 'fastq'
    elif fastq1.endswith("sam"):
        conf_dict['General']['format'] = 'sam'
        conf_dict['General']['sam'] = conf_dict['General']['fastq_1']
    else:
        print "Please Check your input file, this file %s is not fastq file nor sam file.\n"%each_file
        sys.exit(0)
    if fastq2!=None:
        conf_dict['General']['fastq_2'] = fastq2
    conf_dict['General']['gene_annotation'] = gene_annotation
    
    conf_dict['Step1_Mapping'] = {}
    conf_dict['Step1_Mapping']['mapping_software_main'] = mapping_tool
    conf_dict['Step1_Mapping']['mapindex'] = mapping_index
    conf_dict['Step1_Mapping']['mapping_p'] = threads
    conf_dict['Step1_Mapping']['q30filter'] = qfilter
    # conf_dict['rscript'] = os.path.join(DrSeq2pipe.__path__[0], "Rscript/")
    
    conf_dict['Step2_ExpMat'] = {}
    
    logfile = conf_dict['General']['outputdirectory']+'progress_log.txt'

    Log("Step1: alignment",logfile)
    t= time.time()
    ### create mapping dir 
    mapping_dir = conf_dict['General']['outputdirectory'] + 'mapping/'
    CreateDirectory(mapping_dir)
    ### check reads file format , start mapping step if format is fastq
    if conf_dict['General']['format'] == 'sam':
        Log('reads file format is sam, skip mapping step',logfile)
        conf_dict['General']['sam'] = conf_dict['General']['fastq_1']
    else:
        Log('Now start mapping in %s , all mapping result will be here'%(mapping_dir),logfile)
        os.chdir(mapping_dir)
        ## choose mapping tool from STAR and bowtie2 according to config file
        if conf_dict['Step1_Mapping']['mapping_software_main'] == "STAR":
            Log('user choose STAR as alignment software',logfile)
            if Get('which STAR')[0].strip() == "":
                LogError('STAR is not detected in default PATH, make sure you installed STAR and export it into default PATH',logfile)
            if fastq2==None :
                mapping_cmd = 'STAR --genomeDir %s --readFilesIn %s --runThreadN %s'%(conf_dict['Step1_Mapping']['mapindex'],conf_dict['General']['fastq_1'],conf_dict['Step1_Mapping']['mapping_p'])
                mapping_cmd2 = 'mv Aligned.out.sam %s.sam'%(conf_dict['General']['outname'])
            else:
                mapping_cmd = 'STAR --genomeDir %s --readFilesIn %s %s --runThreadN %s'%(conf_dict['Step1_Mapping']['mapindex'],conf_dict['General']['fastq_1'],conf_dict['General']['fastq_2'],conf_dict['Step1_Mapping']['mapping_p'])
                mapping_cmd2 = 'mv Aligned.out.sam %s.sam'%(conf_dict['General']['outname'])
            LogCommand(mapping_cmd,logfile)
            LogCommand(mapping_cmd2,logfile)
        elif conf_dict['Step1_Mapping']['mapping_software_main'] == "bowtie2":
            Log('user choose bowtie2 as alignment software',logfile)
            if Get('which bowtie2')[0].strip() == "":
                LogError('bowtie2 is not detected in default PATH, make sure you installed bowtie2 and export it into default PATH',logfile)
            if fastq2==None :
                mapping_cmd = 'bowtie2 -p %s -x %s -U %s -S %s.sam   2>&1 >>/dev/null |tee -a %s.bowtieout'%(conf_dict['Step1_Mapping']['mapping_p'],conf_dict['Step1_Mapping']['mapindex'],conf_dict['General']['fastq_1'],conf_dict['General']['outname'],conf_dict['General']['outname'])
            else:
                mapping_cmd = 'bowtie2 -p %s -x %s -1 %s -2 %s -S %s.sam   2>&1 >>/dev/null |tee -a %s.bowtieout'%(conf_dict['Step1_Mapping']['mapping_p'],conf_dict['Step1_Mapping']['mapindex'],conf_dict['General']['fastq_1'],conf_dict['General']['fastq_2'],conf_dict['General']['outname'],conf_dict['General']['outname'])
            LogCommand(mapping_cmd,logfile)
        else:
            LogError("alignment tools can only be STAR and bowtie2",logfile)
        conf_dict['General']['sam'] = mapping_dir + conf_dict['General']['outname'] + '.sam'
    ### transform to bed file, awk helps to conduct q30 filtering
    Log("transfer sam file to aligned bed file with own script",logfile)
    conf_dict['General']['bed'] = mapping_dir + conf_dict['General']['outname'] + '.bed' 
    conf_dict['General']['sampledownsam'] = mapping_dir + conf_dict['General']['outname'] + '_sampledown.sam' 
    conf_dict['General']['sampledownbed'] = mapping_dir + conf_dict['General']['outname'] + '_sampledown.bed' 
    if int(conf_dict['Step1_Mapping']['q30filter']) == 1:
        Log("q30 filter is turned on",logfile)
    else:
        Log("q30 filter is turned off",logfile)
    ### use own script to transform sam to bed, and random sampling 5M mappable reads
    SampleDownTransformSam(conf_dict['General']['sam'],conf_dict['General']['bed'],conf_dict['General']['sampledownsam'],conf_dict['General']['sampledownbed'],5000000,int(conf_dict['Step1_Mapping']['q30filter']))
    if not os.path.isfile(conf_dict['General']['bed']) or os.path.getsize(conf_dict['General']['bed']) == 0:
        LogError('Alignment step / q30 filtering step failed, check your alignment parameter and samfile',logfile)
    s1time = time.time() -t
    Log("time for alignment: %s"%(s1time),logfile)
    Log("Step1: alignment DONE",logfile)

    ### create annotation dir and generate related annotation file
    t = time.time() 
    Log("Step2: transform expression matrix",logfile)
    Log('generate related annotation file with own script',logfile)
    annotation_dir = conf_dict['General']['outputdirectory'] + 'annotation/'
    CreateDirectory(annotation_dir)
    os.chdir(annotation_dir)    
    GeneAnnotation(conf_dict['General']['gene_annotation'],400,conf_dict['General']['outname'])

    ### create expression matrix dir and generate matrix
    Log('generate expression matrix with own script',logfile)    
    expdir = conf_dict['General']['outputdirectory'] + 'expmatrix/'
    CreateDirectory(expdir)
    os.chdir(expdir)
    
    ### use bedtools(intersect function) to assign exon/intron/intergenic/overlapping gene information to all reads
    ### sort according to name
    Log('add gene annotation on aligned bed file',logfile)
    cmd1 = "bedtools intersect -a %s -b %s  -wo   | sort -k 4,4 - | uniq >  %s"%(conf_dict['General']['bed'],annotation_dir+conf_dict['General']['outname']+'_gene_anno_symbol.bed',conf_dict['General']['outname']+'_on_symbol.bed')
    # cmd2 = "bedtools intersect -a %s -b %s -c | sort -k 4,4 - | uniq > %s"%(conf_dict['General']['bed'],annotation_dir+conf_dict['General']['outname']+'_gene_anno_cds.bed',conf_dict['General']['outname']+'_on_cds.bed')
    # cmd3 = "bedtools intersect -a %s -b %s -c | sort -k 4,4 - | uniq > %s"%(conf_dict['General']['bed'],annotation_dir+conf_dict['General']['outname']+'_gene_anno_3utr.bed',conf_dict['General']['outname']+'_on_3utr.bed')
    # cmd4 = "bedtools intersect -a %s -b %s -c | sort -k 4,4 - | uniq > %s"%(conf_dict['General']['bed'],annotation_dir+conf_dict['General']['outname']+'_gene_anno_5utr.bed',conf_dict['General']['outname']+'_on_5utr.bed')
    # cmd5 = "bedtools intersect -a %s -b %s -c | sort -k 4,4 - | uniq > %s"%(conf_dict['General']['bed'],annotation_dir+conf_dict['General']['outname']+'_gene_anno_TTSdis.bed',conf_dict['General']['outname']+'_on_TTSdis.bed')
    LogCommand(cmd1,logfile)
    # LogCommand(cmd2,logfile)
    # LogCommand(cmd3,logfile)
    # LogCommand(cmd4,logfile)
    # LogCommand(cmd5,logfile)
   
    ### generate expression and QC matrix based on bed file
    Log('generate expression matrix and QC matrix with own script',logfile)
    ### qcmatfull contains all cell_barcodes, while qcmat,expmat only contain cell_barcodes >= covergncutoff(100, default)
    conf_dict['Step2_ExpMat']['expmat'] = expdir + conf_dict['General']['outname'] + "_expmat.txt"
    
    GenerateMatrix2(conf_dict['General']['gene_annotation'],conf_dict['General']['outname']+ '_on_symbol.bed',conf_dict['Step2_ExpMat']['expmat'])
        
    Log("Step2 transform expression matrix DONE",logfile)
    s2time = time.time() -t
    Log("time for transform expmat: %s"%(s2time),logfile)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt me!\n")
        sys.exit(0)
